/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users": {
    /** The `email` cannot match the email of an existing User. */
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Email. */
            email: string;
            /** Password. */
            password: string;
            /** Display name. */
            name?: string;
            /** Whether the display `name` should be displayed on Locations and Reviews added by this user. */
            add_anonymously?: boolean;
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Restricted to the same User. */
    put: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Email. */
            email: string;
            /** Password. */
            password: string;
            /** Display name. */
            name: string;
            /** Whether the display `name` should be displayed on Locations and Reviews added by this user. */
            add_anonymously: boolean;
          };
        };
      };
    };
  };
  "/users/token": {
    get: {
      parameters: {
        query: {
          /** User email. */
          email: string;
          /** User password. */
          password: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/clusters": {
    get: {
      parameters: {
        query: {
          /** The southwest and northeast corners of the bounding box in WGS84 decimal degrees, in the format `swlat,swlng|nelat,nelng`. Latitude must be in the interval [-85.0511, 85.0511] and longitude must be in the interval [-180, 180]. */
          bounds: components["parameters"]["bounds"];
          /** Zoom level, where the world is divided into a 2<sup>zoom</sup> x 2<sup>zoom</sup> grid. */
          zoom?: components["parameters"]["zoom"];
          /** Whether to include Locations imported from municipal tree inventories. */
          muni?: components["parameters"]["muni"];
          /** IDs of Types to include (or all if empty). */
          types?: components["parameters"]["types"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Cluster"][];
          };
        };
      };
    };
  };
  "/types": {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Type"][];
          };
        };
      };
    };
  };
  "/types/{id}": {
    get: {
      parameters: {
        path: {
          /** Type ID. */
          id: components["parameters"]["type_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Type"];
          };
        };
      };
    };
  };
  "/types/counts": {
    get: {
      parameters: {
        query: {
          /** The southwest and northeast corners of the bounding box in WGS84 decimal degrees, in the format `swlat,swlng|nelat,nelng`. Latitude must be in the interval [-85.0511, 85.0511] and longitude must be in the interval [-180, 180]. */
          bounds: components["parameters"]["bounds"];
          /** Whether to include Locations imported from municipal tree inventories. */
          muni?: components["parameters"]["muni"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["TypeCount"][];
          };
        };
      };
    };
  };
  "/locations": {
    get: {
      parameters: {
        query: {
          /** The southwest and northeast corners of the bounding box in WGS84 decimal degrees, in the format `swlat,swlng|nelat,nelng`. Latitude must be in the interval [-85.0511, 85.0511] and longitude must be in the interval [-180, 180]. */
          bounds: components["parameters"]["bounds"];
          /** Whether to include Locations imported from municipal tree inventories. */
          muni?: components["parameters"]["muni"];
          /** IDs of Types to include (or all if empty). */
          types?: components["parameters"]["types"];
          /** Maximum number of Locations to return. */
          limit?: number;
          /** Offset from which to apply `limit`. */
          offset?: number;
          /** Center `latitude,longitude` in WGS84 decimal degrees. If provided, Locations are returned in order of increasing distance and the distance to each Location is returned. Longitude must be in the interval [-180, 180] and latitude in the interval [-90, 90]. */
          center?: number[];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["ListLocation"][];
          };
        };
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EditLocation"];
        };
      };
    };
  };
  "/locations/count": {
    get: {
      parameters: {
        query: {
          /** The southwest and northeast corners of the bounding box in WGS84 decimal degrees, in the format `swlat,swlng|nelat,nelng`. Latitude must be in the interval [-85.0511, 85.0511] and longitude must be in the interval [-180, 180]. */
          bounds: components["parameters"]["bounds"];
          /** Whether to include Locations imported from municipal tree inventories. */
          muni?: components["parameters"]["muni"];
          /** IDs of Types to include (or all if empty). */
          types?: components["parameters"]["types"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": number;
          };
        };
      };
    };
  };
  "/locations/{id}": {
    get: {
      parameters: {
        path: {
          /** Location ID. */
          id: components["parameters"]["location_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
    };
    put: {
      parameters: {
        path: {
          /** Location ID. */
          id: components["parameters"]["location_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Location"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EditLocation"];
        };
      };
    };
  };
  "/locations/{id}/reviews": {
    get: {
      parameters: {
        path: {
          /** Location ID. */
          id: components["parameters"]["location_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Review"][];
          };
        };
      };
    };
    /** Uploaded photos are currently ignored. */
    post: {
      parameters: {
        path: {
          /** Location ID. */
          id: components["parameters"]["location_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Review"];
          };
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            json: components["schemas"]["EditReview"];
            /** Photos to upload. */
            photos?: string[] | null;
          };
        };
      };
    };
  };
  "/reviews/{id}": {
    get: {
      parameters: {
        path: {
          /** Review ID. */
          id: components["parameters"]["review_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Review"];
          };
        };
      };
    };
    /** Uploaded photos are currently ignored. */
    put: {
      parameters: {
        path: {
          /** Review ID. */
          id: components["parameters"]["review_id"];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "application/json": components["schemas"]["Review"];
          };
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            json: components["schemas"]["EditReview"];
            /** Photos to upload. */
            photos?: string[] | null;
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    IdField: {
      /** Unique identifier. */
      id: number;
    };
    LatLngFields: {
      /** Latitude in WGS84 decimal degrees. */
      lat?: number;
      /** Longitude in WGS84 decimal degrees. */
      lng?: number;
    };
    DateFields: {
      /** Date and time created in format YYYY-MM-DDThh:mm:ss.sssZ. */
      created_at: string;
      /** Date and time last updated in format YYYY-MM-DDThh:mm:ss.sssZ. */
      updated_at: string;
    };
    /** Number of Locations in an area. */
    Cluster: components["schemas"]["LatLngFields"] & {
      /** Number of Locations. Locations with multiple Types are counted as their number of Types. */
      count: number;
    };
    /** Number of Location Types in an area. */
    TypeCount: {
      /** Type ID. */
      id: number;
      /** Number of Locations with that Type ID. */
      count: number;
    };
    /** Type properties that can be edited. Properties `scientific_names` and `common_names['en']` cannot both be empty. */
    EditType: {
      /** Type ID of taxonomic parent. */
      parent_id?: number | null;
      /** Whether pending admin review. */
      pending?: boolean;
      /**
       * Scientific names, starting with the preferred synonym.
       * - Genus (or higher rank): Prunus
       * - Subgenus: Prunus subg. Amygdalus
       * - Species: Prunus domestica
       * - Subspecies: Prunus domestica subsp. domestica, Prunus persica var. nucipersica, Brassica oleracea var. capitata f. rubra
       * - Hybrid: Prunus x eminens, Prunus cerasus x Prunus fruticosa
       * - Cultivar: Prunus persica 'George IV', Prunus domestica subsp. domestica 'Italian', Acer truncatum x platanoides 'Keithsform'
       */
      scientific_names?: string[];
      /**
       * Taxonomic rank.
       * - 0: Polyphyletic
       * - 1: Kingdom
       * - 2: Phylum
       * - 3: Class
       * - 4: Order
       * - 5: Family
       * - 6: Genus
       * - 7: Multispecies
       * - 8: Species
       * - 9: Subspecies
       */
      taxonomic_rank?: number | null;
      /** Common names, starting with the preferred synonym, by language code (e.g. `en`) and optional region code (e.g. `en_us`). */
      common_names?: { [key: string]: string[] };
      /**
       * Links to more information, by resource code.
       * - wikipedia: English Wikipedia (https://en.wikipedia.org)
       * - eat_the_weeds: Eat the Weeds (https://www.eattheweeds.com)
       * - foraging_texas: Foraging Texas (https://www.foragingtexas.com)
       * - urban_mushrooms: Urban Mushrooms (http://urbanmushrooms.com)
       * - fruitipedia: Fruitipedia (http://www.fruitipedia.com)
       * - usda: USDA Plants Database (https://plants.usda.gov)
       */
      urls?: { [key: string]: string };
    };
    /** All Type properties. */
    Type: components["schemas"]["IdField"] &
      components["schemas"]["DateFields"] &
      components["schemas"]["EditType"] & { [key: string]: any };
    ListLocation: components["schemas"]["IdField"] &
      components["schemas"]["LatLngFields"] & {
        /** Type IDs. */
        type_ids: number[];
        /** Distance in meters from provided centerpoint. */
        distance?: number;
      };
    /** Location properties that can be edited. */
    EditLocation: components["schemas"]["LatLngFields"] & {
      /** Type IDs. */
      type_ids: number[];
      /** Whether suspected to be wrong in some way and requires verification. */
      unverified?: boolean;
      /**
       * Access level.
       * - 0: Location is on my property.
       * - 1: I have permission from the owner to add this Location.
       * - 2: Location is on public land.
       * - 3: Location is on private property but overhangs public property.
       * - 4: Location is on private property.
       */
      access?: (0 | 1 | 2 | 3 | 4) | null;
      /** Description. */
      description?: string | null;
      /** First month in season (zero-based). */
      season_start?: number;
      /** Last month in season (zero-based). */
      season_stop?: number;
    };
    /** All Location properties. */
    Location: components["schemas"]["IdField"] &
      components["schemas"]["EditLocation"] &
      components["schemas"]["DateFields"] & {
        /** Address. Either provided for imported locations whose coordinates had to be geocoded from the address or reverse-geocoded from coordinates. */
        address: string | null;
        /** City (reverse-geocoded from coordinates). */
        city: string | null;
        /** State (reverse-geocoded from coordinates). */
        state: string | null;
        /** County (reverse-geocoded from coordinates). */
        country: string | null;
        /** Whether imported from a municipal tree inventory. */
        muni: boolean;
      };
    /** Review properties that can be edited. */
    EditReview: {
      /** Comment. */
      comment?: string | null;
      /** Date visited in format YYYY-MM-DD. */
      observed_on?: string | null;
      /** Fruiting status. */
      fruiting?: (0 | 1 | 2) | null;
      /** Quality rating. */
      quality_rating?: (0 | 1 | 2 | 3 | 4) | null;
      /** Yield rating. */
      yield_rating?: (0 | 1 | 2 | 3 | 4) | null;
    };
    /** Observations of and opinions about a Location. */
    Review: components["schemas"]["IdField"] &
      components["schemas"]["EditReview"] &
      components["schemas"]["DateFields"] & {
        /** Location ID. */
        location_id: number;
        /** User ID. */
        user_id: number | null;
        photos: components["schemas"]["Photo"][];
      };
    /** Location photo. */
    Photo: {
      /** Path to thumbnail. */
      thumb: string;
      /** Path to medium size file. */
      medium: string;
      /** Path to original file. */
      original: string;
    };
    User: components["schemas"]["IdField"] &
      components["schemas"]["DateFields"] & {
        /** Email. */
        email: string;
        /** Display name. */
        name: string;
        /** Whether the display `name` should be displayed on Locations and Reviews added by this user. */
        add_anonymously: boolean;
      };
  };
  parameters: {
    /** The southwest and northeast corners of the bounding box in WGS84 decimal degrees, in the format `swlat,swlng|nelat,nelng`. Latitude must be in the interval [-85.0511, 85.0511] and longitude must be in the interval [-180, 180]. */
    bounds: number[][];
    /** Zoom level, where the world is divided into a 2<sup>zoom</sup> x 2<sup>zoom</sup> grid. */
    zoom: number;
    /** Whether to include Locations imported from municipal tree inventories. */
    muni: boolean;
    /** Whether to include pending Types. */
    pending: boolean;
    /** IDs of Types to include (or all if empty). */
    types: number[];
    /** Location ID. */
    location_id: number;
    /** Type ID. */
    type_id: number;
    /** Review ID. */
    review_id: number;
    /** Longitude in WGS84 decimal degrees. */
    lng: number;
    /** Latitude in WGS84 decimal degrees. */
    lat: number;
    /** Author name. If not provided, defaults to the User's name if the user has not opted to add locations anonymously. */
    author: string;
    /** Description. */
    description: string;
    /** First month in season. */
    season_start: number;
    /** Last month in season. */
    season_stop: number;
    /** Whether needs verification. */
    unverified: boolean;
    /**
     * Access level.
     * - 0: Location is on my property.
     * - 1: I have permission from the owner to add this Location.
     * - 2: Location is on public land.
     * - 3: Location is on private property but overhangs public property.
     * - 4: Location is on private property.
     */
    access: 0 | 1 | 2 | 3 | 4;
    /** Review comment. */
    comment: string;
    /**
     * Fruiting status.
     * - 0: Flowers.
     * - 1: Unripe fruit.
     * - 2: Ripe fruit.
     */
    fruiting: 0 | 1 | 2;
    /**
     * Quality rating.
     * - 0: Poor.
     * - 1: Fair.
     * - 2: Good.
     * - 3: Very good.
     * - 4: Excellent.
     */
    quality_rating: 0 | 1 | 2 | 3 | 4;
    /**
     * Yield rating.
     * - 0: Poor.
     * - 1: Fair.
     * - 2: Good.
     * - 3: Very good.
     * - 4: Excellent.
     */
    yield_rating: 0 | 1 | 2 | 3 | 4;
    /** Date visited in format YYYY-MM-DD. */
    observed_on: string;
  };
}

export interface operations {}
